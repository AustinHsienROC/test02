/*
===================================================================
Name		: CTAApi.h                ╭══╮
Author		: Austin                ╭╯ΘΘ║
Version		: v0.0020               ╰⊙═⊙╯。oо○
Copyright	: Copyright (C) 2014 By oToBrite Electronics Corp.
Description	: This function implement CTA main process.

==================================================================
History
--------------+-------------+-----------------------------------------+------------
DATE		  |VERSION      |DESCRIPTION  							  | Author
--------------+-------------+-----------------------------------------+------------
2014/07/09	  | v0.0010  	|First setup functions        	    	  | Austin
--------------+-------------+-----------------------------------------+------------
2014/12/30	  | v0.0020  	|API for K2/PC platform        	    	  | Austin
--------------+-------------+-----------------------------------------+------------
*/

#ifndef _CTAApi_H_
#define _CTAApi_H_

//******************************************************************************
// I N C L U D E   F I L E S
//******************************************************************************

#include "CTA_Type.h"
#include "CTA_Def.h"
#include "CoordinateConversion.h"
#ifndef _WIN32
  #include "ICP_Image.hpp"
#endif

#ifdef __cplusplus
    extern "C" {
#endif

//******************************************************************************
// E X T E R N A L   V A R I A B L E   P R O T O T Y P E S
//******************************************************************************
extern UCHAR CTAAlarmState;//isCTAAlarm ;
extern CandidateRec CTACandidateL [ MAXCandidateNum ];
extern CandidateRec CTACandidateR [ MAXCandidateNum ];


#ifdef _WIN32
    extern char g_FrameReport[ 500 ];      ///< RemoteCtrl Debug Info
	extern int g_FrameReportIdx;//used index for g_FrameReport
    extern CHAR VideoFilePath[ 240 ];

    //-------------------XMLInfo-------------------------//
    extern BOOL EventResultL[MAXSizeEventResult];
    extern BOOL EventResultR[MAXSizeEventResult];
#endif

//******************************************************************************
// F U N C T I O N   B O D Y S
//******************************************************************************

//---------Initialize-----------------
void CTA_WorkBuf_Allocate(void); // (oTo_WorkBuf_Allocate)internal memory alloc
bool CTA_UpdateLUT(UINT32 a_unParameterID, UCHAR * a_pData, UINT32 a_unDataSize);       // (oTo_UpdateParameter) LUT, Custom Car data
bool CTA_UpdateCarInfo(UINT32 a_CarWidth_cm, UINT32 a_RearTireToBumper_cm
						, DOUBLE a_SteerOverFrontTireRatio, UINT32 a_WheelBase_cm);

bool CTA_UpdateCarInfo_Skin(UCHAR * a_pData, UINT32 a_unDataSize);  // (oTo_UpdateParameter) LUT, Custom Car data

//---------Process-----------------
void CTA_UpdateCarState(UINT32 a_FrameTimeStamp_ms, FLOAT a_CraSpeed, FLOAT a_SteerAngle
				, UINT32 a_FrameCnt);
void CTA_UpdateCarState_Skin(UCHAR *FrameHd);  // (Time/Speed/Angle) LUT, Custom Car data
#ifdef _WIN32
void CTA_Process(UCHAR *dst_Y, UCHAR *src_Y, UCHAR *FrameHd);
#else
void CTA_Process(ICP_Image *picp_src_Y);
#endif
//---------Release-----------------
void CTA_Reset(void); 
void CTA_WorkBuf_Release(void); 

//---------GetResult-----------------
/**
* @brief get the alarm state at this frame
* @return  [0:No alarm / 1:Right Alrm  /2:LeftAlarm / 3: Both side alarm]
*/
#define C_CTA_STATUS_LEFT_WARNING		0x01
#define C_CTA_STATUS_RIGHT_WARNING		0x02
inline UCHAR GetResult_Alarm(void){ return CTAAlarmState; }

CandidateRec *GetResult_TargetCarsL( short &MaxNum );
CandidateRec *GetResult_TargetCarsR( short &MaxNum );

#ifdef __cplusplus
}
#endif


#endif // END #ifndef _CTAApi_H_

