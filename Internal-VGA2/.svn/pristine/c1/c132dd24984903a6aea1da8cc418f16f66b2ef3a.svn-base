/*
===================================================================
Name		: ML_NeuralNet.h
Author		: Austin
Version		: v0.0010
Copyright	: Copyright (C) 2014 By oToBrite Electronics Corp.
Description	: This function implement Point_Group .

==================================================================
History
--------------+-------------+-----------------------------------------+------------
DATE		  |VERSION      |DESCRIPTION  							  | Author
--------------+-------------+-----------------------------------------+------------
2014/07/29	  | v0.0010  	|First setup functions        	    	  | Austin
--------------+-------------+-----------------------------------------+------------
*/

//---------------------------------------------------------------------------
#ifndef _ML_NeuralNet_H_
#define _ML_NeuralNet_H_

//******************************************************************************
// I N C L U D E   F I L E S
//******************************************************************************
#include "CTA_Type.h"
#include "CTA_Def.h"

//******************************************************************************
// M A C R O   D E F I N I T I O N S
//******************************************************************************
//=================Day===============//
#define SampleFeatureNum 24
#define HiddenNodeNum    5
//=================Night===============//
#define SampleFeatureNum_Night 5
#define HiddenNodeNum_Night    6

#define CNN ML_NeuralNet::getInstance()
//******************************************************************************
// E X T E R N A L   V A R I A B L E   P R O T O T Y P E S
//******************************************************************************
//===================Day============================//
const FLOAT normalizedMean[SampleFeatureNum]={
730.027071102414 , 889.529028049576 , 164.272341813438 , 331.160469667319 , 105.595564253099 , -282.342465753425 , 395.779517286367 , 0.0290280495759948 , 23.3816046966732 , 0.0975212002609263 , -3.25570776255708 , -0.170906718851924 , 27.1839530332681 , -2.79582517938682 , -0.168949771689498 , 335.64514024788 , 187.139921722114 , -18.3467058056099 , -1.31898238747554 , 244.531637312459 , 303.909001956947 , -364.463796477495 , -22.5163078930202 , 65.6265492498369 , };
const FLOAT normalizedStd[SampleFeatureNum]={
1803.45314770121 , 1962.10782195974 , 219.027992380825 , 258.556774599127 , 284.786977357059 , 750.630524350741 , 163.85715119959 , 0.234372281780447 , 20.4994671824294 , 0.579560859330561 , 7.60835031347456 , 0.917760696724317 , 1183.26350127695 , 9.34320929179509 , 3.07688412561486 , 201.495094957116 , 79.8103814721555 , 41.6602387151175 , 30.0618412144569 , 622.278012989757 , 170.568405886348 , 635.37299102999 , 601.387463976416 , 34.8582321219854 , };
const FLOAT BPNWeightInput[SampleFeatureNum*HiddenNodeNum]={
13.0332794491412 , 5.32861990643287 , -1.19356823579964 , -3.816338038811 , -3.27647547971971 , -10.6964048925799 , 3.07079298576687 , 3.27966712351016 , 0.439743991626369 , -1.75677921502579 , 4.11586382173206 , -6.17832618200364 , -3.71522973620605 , 1.20170742467395 , 11.5530863722648 , -5.07197450631494 , -5.91815811216178 , 4.47676414310023 , -0.766869890652163 , -5.19638342524116 , -1.78455972574132 , -6.37518996469714 , -0.562570400212356 , -1.20799697191836 , -1.96066836854546 , 1.77065585875015 , -1.73317388460199 , -0.321038044767943 , 1.71234394039508 , 7.00928087208364 , 7.36654814152968 , -0.447592679534044 , 5.2661587412086 , -2.76875690080478 , 4.33721505795277 , 0.216674206896718 , 0.565963005245144 , -0.296527100220529 , -1.0276720976317 , 7.22848681288023 , 3.53746037725143 , -0.740431493141634 , 3.01493303929816 , -0.361849629510612 , 4.35001145047172 , 0.0315353673550765 , 1.87751394128598 , 0.61571011627141 , -1.03857478026172 , -2.15530481800061 , -0.168788166487921 , 1.08693254037631 , -1.35286952288291 , 1.67613399455776 , 4.20762012932248 , 1.55388964303616 , 1.40181005782331 , 2.5142837385036 , 0.985296936831463 , 2.11576114153652 , -0.136746185406541 , 0.332357333299266 , -0.364378371524972 , 0.211130929705747 , 0.344886193907168 , -4.48731466022875 , 2.15485865452656 , -2.69644379231369 , 2.02906891483655 , -4.00881312678808 , -4.02908338720219 , 0.612968367199408 , 0.301521718694821 , 3.29078740229645 , -2.5219229153969 , 0.753657879042341 , 0.0562631830951514 , -5.67838090591917 , -2.52421963776996 , -1.07840339024471 , 7.58952784989213 , 3.29904244683001 , 8.56612381551537 , -2.54866716502334 , -2.35481038173611 , 0.665665535982878 , -2.00069893522448 , 1.15160414885926 , 0.286463714117285 , 2.62626857814081 , -0.98013839114002 , -0.399651818782677 , -2.51393884423394 , 0.792347706425678 , 0.87407061666014 , -1.91379988742928 , 1.52948113316613 , 5.86020333490052 , -3.04156856067464 , -6.81498433309275 , -3.87450658414358 , 0.759912422091907 , 0.767242604877896 , 4.49045469962519 , -7.21367027889146 , 2.4588414950556 , 4.29894260528454 , -14.6832346883027 , 2.54118601640163 , 0.141423966863405 , -1.37475947258061 , 0.0681814019603897 , 0.470720406237626 , 0.0813535130800199 , 1.01016375807474 , -1.61190277804925 , 1.53055127574246 , 0.123253775570795 , -3.54081991033734 , -2.61307258697679 , };
const FLOAT BPNWeightHidden[HiddenNodeNum]={
-3.19027259919891 , -2.4831045059713 , 7.22364786755906 , 4.37703519663659 , 3.09962798068375 , };
const FLOAT BPNThetaHidden[HiddenNodeNum]={
-9.4167159074682 , -16.8875631774796 , 4.59827935285345 , -4.72326129144051 , 3.31921173880098 , };
const FLOAT BPNThetaOutput[1]={
-4.85302645772771};

//===================Night============================//
const FLOAT normalizedMean_Night[SampleFeatureNum_Night]={0 };
const FLOAT normalizedStd_Night[SampleFeatureNum_Night]={0 };
const FLOAT BPNWeightInput_Night[SampleFeatureNum_Night*HiddenNodeNum_Night]={0 };
const FLOAT BPNWeightHidden_Night[HiddenNodeNum_Night]={0};
const FLOAT BPNThetaHidden_Night[HiddenNodeNum_Night]={0 };
const FLOAT BPNThetaOutput_Night[1]={0};

//******************************************************************************
// S T A T I C   F U N C T I O N   P R O T O T Y P E S
//******************************************************************************

//******************************************************************************
// E X T E R N A L   F U N C T I O N   P R O T O T Y P E S
//******************************************************************************

//******************************************************************************
// F U N C T I O N   B O D Y S
//******************************************************************************

class ML_NeuralNet
{
private:
    static ML_NeuralNet *instance;
public:

    ML_NeuralNet(void);
    ~ML_NeuralNet(void);
    static ML_NeuralNet* getInstance();
    static void ResetInstance();

    void CandidateFeatureUpdate_1(CandidateRec CTACandidate[], INT16 inMaxCanNum,  UINT16 imgDimensionX, UINT16 imgDimensionY, HarrisCornerPos *harrisCornersPrev, HarrisCornerPos2 *harrisCorners2Prev, int pointNumPrev, UINT16 *vSobelQty16x16, UINT16 *hSobelQty16x16, UINT16 *pEdgeQty16x16);

    UINT16 Predict_1(CandidateRec CTACandidate[] ,INT16 inMaxCand , INT16 validNum);


    void HeadLightFeatureUpdate_1( HeadLight lamp[MAX_HeadLightNum] , UINT16 inMaxNum);
    UINT16 HeadLightPredict_1(HeadLight lamp[MAX_HeadLightNum], UINT16 inMaxNum);

};


#endif // END #ifndef _ML_NeuralNet_H_




