/*
===================================================================
Name		: ML_NeuralNet.h
Author		: Austin
Version		: v0.0010
Copyright	: Copyright (C) 2014 By oToBrite Electronics Corp.
Description	: This function implement Point_Group .

==================================================================
History
--------------+-------------+-----------------------------------------+------------
DATE		  |VERSION      |DESCRIPTION  							  | Author
--------------+-------------+-----------------------------------------+------------
2014/07/29	  | v0.0010  	|First setup functions        	    	  | Austin
--------------+-------------+-----------------------------------------+------------
*/

//---------------------------------------------------------------------------
#ifndef _ML_NeuralNet_H_
#define _ML_NeuralNet_H_

//******************************************************************************
// I N C L U D E   F I L E S
//******************************************************************************
#include "CTA_Type.h"
#include "CTA_Def.h"

//******************************************************************************
// M A C R O   D E F I N I T I O N S
//******************************************************************************
//=================Day===============//
#define SampleFeatureNum 24
#define HiddenNodeNum    6
//=================Night===============//
#define SampleFeatureNum_Night 5
#define HiddenNodeNum_Night    6

#define CNN ML_NeuralNet::getInstance()
//******************************************************************************
// E X T E R N A L   V A R I A B L E   P R O T O T Y P E S
//******************************************************************************
//===================Day============================//
const FLOAT normalizedMean[SampleFeatureNum]={
562.925706771861 , 679.301775147929 , 132.534188034188 , 255.754109138725 , 31.0108481262327 , -97.5279421433268 , 366.803418803419 , };
const FLOAT normalizedStd[SampleFeatureNum]={
174.598603442411 , 169.285155373569 , 57.9645909292261 , 320.884257632043 , 325.134463986719 , 1048.59056152606 , 165.527972498018 , };
const FLOAT BPNWeightInput[SampleFeatureNum*HiddenNodeNum]={
6.77745742550884 , 3.96693340820364 , 2.11254674233749 , 8.74508015643854 , -8.58018096288042 , -1.02596310745978 , 3.52973087233435 , -1.53613941404329 , -1.48667456681659 , 6.27187172526139 , 6.73415627509835 , 1.43050466852817 , -3.53955693816331 , -0.896348978038867 , -0.651829811796341 , -3.20794033578229 , -5.0775567207184 , -1.20787066943097 , -1.93023837291939 , -1.13879898827853 , 0.243419906630038 , -3.73429641835284 , 1.95356737873237 , -5.95859373223967 , -3.55532217980152 , -1.15222380715086 , -5.1767995135242 , 2.84924360513609 , 2.71203255364876 , -9.33362213934612 , 3.52824753831341 , 1.38860290832393 , 2.99348950259304 , 7.923472761897 , -1.93966156802322 , -1.94497211890754 , 15.3781049936025 , 0.755613963685452 , 3.28650340990507 , 7.61355460504465 , 7.61251927642672 , 8.05433500415104 , };
const FLOAT BPNWeightHidden[HiddenNodeNum]={
2.10503111231832 , -2.93339704893015 , -5.49489339293098 , 1.73951743914487 , -2.72227839393098 , 2.06592463636351 , };
const FLOAT BPNThetaHidden[HiddenNodeNum]={
15.1422164285707 , -2.15391324492702 , -3.86824721112271 , -3.22219089699072 , 2.48197850691187 , -1.33120408320614 , };
const FLOAT BPNThetaOutput[1]={
1.36386032653983};

//===================Night============================//
const FLOAT normalizedMean_Night[SampleFeatureNum_Night]={0 };
const FLOAT normalizedStd_Night[SampleFeatureNum_Night]={0 };
const FLOAT BPNWeightInput_Night[SampleFeatureNum_Night*HiddenNodeNum_Night]={0 };
const FLOAT BPNWeightHidden_Night[HiddenNodeNum_Night]={0};
const FLOAT BPNThetaHidden_Night[HiddenNodeNum_Night]={0 };
const FLOAT BPNThetaOutput_Night[1]={0};

//******************************************************************************
// S T A T I C   F U N C T I O N   P R O T O T Y P E S
//******************************************************************************

//******************************************************************************
// E X T E R N A L   F U N C T I O N   P R O T O T Y P E S
//******************************************************************************

//******************************************************************************
// F U N C T I O N   B O D Y S
//******************************************************************************

class ML_NeuralNet
{
private:
    static ML_NeuralNet *instance;
public:

    ML_NeuralNet(void);
    ~ML_NeuralNet(void);
    static ML_NeuralNet* getInstance();
    static void ResetInstance();

    void CandidateFeatureUpdate_1(CandidateRec CTACandidate[], INT16 inMaxCanNum,  UINT16 imgDimensionX, UINT16 imgDimensionY, HarrisCornerPos *harrisCornersPrev, HarrisCornerPos2 *harrisCorners2Prev, int pointNumPrev, UINT16 *vSobelQty16x16, UINT16 *hSobelQty16x16, UINT16 *pEdgeQty16x16);

    UINT16 Predict_1(CandidateRec CTACandidate[] ,INT16 inMaxCand , INT16 validNum);


    void HeadLightFeatureUpdate_1( HeadLight lamp[MAX_HeadLightNum] , UINT16 inMaxNum);
    UINT16 HeadLightPredict_1(HeadLight lamp[MAX_HeadLightNum], UINT16 inMaxNum);

};


#endif // END #ifndef _ML_NeuralNet_H_




