#include "stdafx.h"

#define C_VIDEO_FRAME_HD_FRAME_WIDTH_DW_INDEX			0
#define C_VIDEO_FRAME_HD_FRAME_HEIGHT_DW_INDEX			1
#define C_VIDEO_FRAME_HD_FRAME_COLOR_MODEL_DW_INDEX		2
#define C_VIDEO_FRAME_HD_FRAME_COUNT_DW_INDEX			3
#define C_VIDEO_FRAME_HD_FRAME_TIME_STAMP_DW_INDEX		4
#define C_VIDEO_FRAME_HD_FRAME_CAR_INFO1_DW_INDEX		5
#define C_VIDEO_FRAME_HD_FRAME_CAR_INFO2_DW_INDEX		6
#define C_VIDEO_FRAME_HD_FRAME_ICP_INFO					7
#define C_VIDEO_FRAME_HD_FRAME_SENSOR_INFO				8

#define C_VIDEO_FRAME_HD_CAR_INFO_DRIVING_BYTE_INDEX	20
#define C_VIDEO_FRAME_HD_CAR_SPEED_LO_BYTE_INDEX		21
#define C_VIDEO_FRAME_HD_CAR_SPEED_HI_BYTE_INDEX		22
#define C_VIDEO_FRAME_HD_CAR_ANGLE_LO_BYTE_INDEX		23
#define C_VIDEO_FRAME_HD_CAR_ANGLE_HI_BYTE_INDEX		24
#define C_VIDEO_FRAME_HD_CAR_INFO_MULTI_VIEW_BYTE_INDEX	25
#define C_VIDEO_FRAME_HD_CAR_INFO_RESERVE_BYTE_INDEX	26
#define C_VIDEO_FRAME_HD_CAR_INFO_CHECKSUM_BYTE_INDEX	27

#define C_VIDEO_FRAME_HD_ICP_INFO_ICP_MODE_WORD_INDEX		15
#define C_VIDEO_FRAME_HD_ICP_INFO_ICP_RESULT_BYTE_INDEX		28

#define C_VIDEO_FRAME_HD_SENSOR_INFO_GAIN_WORD_INDEX		16
#define C_VIDEO_FRAME_HD_SENSOR_INFO_BV_WORD_INDEX			17

//C_VIDEO_FRAME_HD_CAR_INFO_DRIVING_BYTE_INDEX	Bits definition
#define C_CAR_INFO_DRIVING_RIGHT_TURN_BIT	0
#define C_CAR_INFO_DRIVING_LEFT_TURN_BIT	1
#define C_CAR_INFO_DRIVING_REVERSE_BIT		2
#define C_CAR_INFO_DRIVING_BREAK_BIT		3

unsigned char GetCheckSum8Bits(unsigned char* a_pData, unsigned int a_unDataSize)
{
	unsigned int unSum;
	unsigned int iloop;

	for (iloop = 0,unSum=0; iloop < a_unDataSize; iloop++)
		unSum += a_pData[iloop];

	unsigned char bCheckSum = 0XFF - (unSum&0xFF);		

	return bCheckSum;
}

bool VerifyCheckSum8Bits(unsigned char * a_pData, unsigned int a_unDataSize, unsigned char a_ubCheckSum)
{
	unsigned int unSum;
	unsigned int iloop;
	for (iloop = 0,unSum=0; iloop < a_unDataSize; iloop++)
		unSum += a_pData[iloop];

	if (0xFF != ((a_ubCheckSum+unSum)&0xFF))		
	{
		return false;
	}

	return true;
}

DWORD GetVideoFrameHdInfo_FrameWidth(unsigned char *a_pFreamHead)
{
	DWORD *pHd = (DWORD*)a_pFreamHead;

	if (NULL==a_pFreamHead)
		return 0;

	return pHd[C_VIDEO_FRAME_HD_FRAME_WIDTH_DW_INDEX];
}

DWORD GetVideoFrameHdInfo_FrameHeight(unsigned char *a_pFreamHead)
{
	DWORD *pHd = (DWORD*)a_pFreamHead;

	if (NULL==a_pFreamHead)
		return 0;

	return pHd[C_VIDEO_FRAME_HD_FRAME_HEIGHT_DW_INDEX];
}

DWORD GetVideoFrameHdInfo_ColorModel(unsigned char *a_pFreamHead)
{
	DWORD *pHd = (DWORD*)a_pFreamHead;

	if (NULL==a_pFreamHead)
		return 0;

	return pHd[C_VIDEO_FRAME_HD_FRAME_COLOR_MODEL_DW_INDEX];
}

DWORD GetVideoFrameHdInfo_FrameCount(unsigned char *a_pFreamHead)
{
	DWORD *pHd = (DWORD*)a_pFreamHead;

	if (NULL==a_pFreamHead)
		return 0;

	return pHd[C_VIDEO_FRAME_HD_FRAME_COUNT_DW_INDEX];
}

DWORD GetVideoFrameHdInfo_TimeStamp(unsigned char *a_pFreamHead)
{
	DWORD *pHd = (DWORD*)a_pFreamHead;

	if (NULL==a_pFreamHead)
		return 0;

	return pHd[C_VIDEO_FRAME_HD_FRAME_TIME_STAMP_DW_INDEX];
}

bool GetVideoFrameHdInfo_IsCarInfoValid(unsigned char *a_pFreamHead)
{
	return VerifyCheckSum8Bits(
					a_pFreamHead+C_VIDEO_FRAME_HD_CAR_INFO_DRIVING_BYTE_INDEX
					, 7
					, a_pFreamHead[C_VIDEO_FRAME_HD_CAR_INFO_CHECKSUM_BYTE_INDEX]);
}

void VideoFrameHdInfo_UpdateAngle_10Times(unsigned char *a_pFreamHead
					,unsigned short a_usNewAngle)
{
	if (NULL==a_pFreamHead)
		return ;

	//Update new value
	a_pFreamHead[C_VIDEO_FRAME_HD_CAR_ANGLE_LO_BYTE_INDEX] = a_usNewAngle&0x00FF;
	a_pFreamHead[C_VIDEO_FRAME_HD_CAR_ANGLE_HI_BYTE_INDEX] = 
										(a_usNewAngle&0xFF00)>>8;

	//calculate new check sum
	unsigned char bCheckSum = GetCheckSum8Bits(
						a_pFreamHead+C_VIDEO_FRAME_HD_CAR_INFO_DRIVING_BYTE_INDEX
						, 7);
	//update check sum
	a_pFreamHead[C_VIDEO_FRAME_HD_CAR_INFO_CHECKSUM_BYTE_INDEX] = bCheckSum;
}

DWORD GetVideoFrameHdInfo_CarInfo1(unsigned char *a_pFreamHead)
{
	DWORD *pHd = (DWORD*)a_pFreamHead;

	if (NULL==a_pFreamHead)
		return 0;

	return pHd[C_VIDEO_FRAME_HD_FRAME_CAR_INFO1_DW_INDEX];
}

DWORD GetVideoFrameHdInfo_CarInfo2(unsigned char *a_pFreamHead)
{
	DWORD *pHd = (DWORD*)a_pFreamHead;

	if (NULL==a_pFreamHead)
		return 0;

	return pHd[C_VIDEO_FRAME_HD_FRAME_CAR_INFO2_DW_INDEX];
}


unsigned short GetVideoFrameHdInfo_CarSpeed_10Times(unsigned char *a_pFreamHead)
{
	if (NULL==a_pFreamHead)
		return 0;

	unsigned short usSpeed = a_pFreamHead[C_VIDEO_FRAME_HD_CAR_SPEED_LO_BYTE_INDEX]
					+ (a_pFreamHead[C_VIDEO_FRAME_HD_CAR_SPEED_HI_BYTE_INDEX]<<8);

	return usSpeed;
}

signed short GetVideoFrameHdInfo_CarAngle_10Times(unsigned char *a_pFreamHead)
{
	if (NULL==a_pFreamHead)
		return 0;

	unsigned short usAngle = a_pFreamHead[C_VIDEO_FRAME_HD_CAR_ANGLE_LO_BYTE_INDEX] 
					+ (a_pFreamHead[C_VIDEO_FRAME_HD_CAR_ANGLE_HI_BYTE_INDEX]<<8);
	signed short sRealAngle10Times=0;

	if (usAngle>32767)
		sRealAngle10Times = usAngle-65536;
	else
		sRealAngle10Times = usAngle;

	return sRealAngle10Times;
}

unsigned char GetVideoFrameHdInfo_CarInfo_CheckSum(unsigned char *a_pFreamHead)
{
	if (NULL==a_pFreamHead)
		return 0;

	return a_pFreamHead[C_VIDEO_FRAME_HD_CAR_INFO_CHECKSUM_BYTE_INDEX] ;
}

bool GetVideoFrameHdInfo_CarInfo_IsLeftTurn(unsigned char *a_pFreamHead)
{
	if (NULL==a_pFreamHead)
		return false;

	if (a_pFreamHead[C_VIDEO_FRAME_HD_CAR_INFO_DRIVING_BYTE_INDEX] & 
				(1<<C_CAR_INFO_DRIVING_LEFT_TURN_BIT))
				return true;

	return false;
}

bool GetVideoFrameHdInfo_CarInfo_IsRightTurn(unsigned char *a_pFreamHead)
{
	if (NULL==a_pFreamHead)
		return false;

	if (a_pFreamHead[C_VIDEO_FRAME_HD_CAR_INFO_DRIVING_BYTE_INDEX] & 
				(1<<C_CAR_INFO_DRIVING_RIGHT_TURN_BIT))
				return true;

	return false;
}

bool GetVideoFrameHdInfo_CarInfo_IsReverse(unsigned char *a_pFreamHead)
{
	if (NULL==a_pFreamHead)
		return false;

	if (a_pFreamHead[C_VIDEO_FRAME_HD_CAR_INFO_DRIVING_BYTE_INDEX] & 
				(1<<C_CAR_INFO_DRIVING_REVERSE_BIT))
				return true;

	return false;
}

bool GetVideoFrameHdInfo_CarInfo_IsBreak(unsigned char *a_pFreamHead)
{
	if (NULL==a_pFreamHead)
		return false;

	if (a_pFreamHead[C_VIDEO_FRAME_HD_CAR_INFO_DRIVING_BYTE_INDEX] & 
				(1<<C_CAR_INFO_DRIVING_BREAK_BIT))
				return true;

	return false;
}

WORD GetVideoFrameHdInfo_GetICPMode(unsigned char *a_pFreamHead)
{
	if (NULL==a_pFreamHead)
		return 0xFFFF;

	WORD *pDataHd = (WORD*)a_pFreamHead;

	return pDataHd[C_VIDEO_FRAME_HD_ICP_INFO_ICP_MODE_WORD_INDEX];
}

unsigned char GetVideoFrameHdInfo_GetICPResult(unsigned char *a_pFreamHead)
{
	if (NULL==a_pFreamHead)
		return 0;
	
	return a_pFreamHead[C_VIDEO_FRAME_HD_ICP_INFO_ICP_RESULT_BYTE_INDEX];
}

WORD GetVideoFrameHdInfo_GetSensorBV(unsigned char *a_pFreamHead)
{
	if (NULL==a_pFreamHead)
		return 0;

	WORD *pDataHd = (WORD*)a_pFreamHead;

	return pDataHd[C_VIDEO_FRAME_HD_SENSOR_INFO_BV_WORD_INDEX];
}

WORD GetVideoFrameHdInfo_GetSensorGain(unsigned char *a_pFreamHead)
{
	if (NULL==a_pFreamHead)
		return 0;

	WORD *pDataHd = (WORD*)a_pFreamHead;

	return pDataHd[C_VIDEO_FRAME_HD_SENSOR_INFO_GAIN_WORD_INDEX];
}